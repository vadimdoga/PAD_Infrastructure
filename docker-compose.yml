version: "2.3"

services:
    rabbitMQ:
        image: rabbitmq:3-management
        container_name: RMQ
        ports:
            - "15672:15672"
        volumes:
            - rabbitMQ_volume:/var/lib/rabbitmq

    orders_mongo_db:
        image: mongo
        container_name: orders_mongo
        environment:
            - MONGO_INITDB_DATABASE=orders_service
        volumes:
            - orders_mongo_db_v:/data/db

    products_mongo_db:
        image: mongo
        container_name: products_mongo
        environment:
            - MONGO_INITDB_DATABASE=products_service
        volumes:
            - products_mongo_db_v:/data/db

    postgres_db:
        image: postgres:latest
        container_name: postgre_db
        networks:
            - default
        ports:
            - "5432:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: "postgres"
            POSTGRES_PASSWORD: "postgres"
            POSTGRES_DB: "postgres"
        restart: on-failure

    products_service:
        image: product_service
        container_name: products_service
        build:
            context: ./PAD_Products_Service
            dockerfile: Dockerfile
        restart: always
        links:
            - products_mongo_db
        ports:
            - "0.0.0.0:8080:8080"
        environment:
            APP_ENVIRONMENT: production
            HIGH_LIMIT: 5
            LOW_LIMIT: 20
            TIMEOUT: 1200
            GATEWAY_ADDR: https://httpbin.org/post
            HOST: 0.0.0.0
            PORT: 8080
            MQ_PORT: 5672
            MQ_ADDRESS: rabbitMQ
            MONGODB_HOST: products_mongo_db
            MONGODB_PORT: 27017
            MONGODB_DB: products_service
        depends_on:
            - rabbitMQ
            - products_mongo_db

    orders_service:
        image: orders_service
        container_name: orders_service
        build:
            context: ./PAD_Orders_Service
            dockerfile: Dockerfile
        links:
            - orders_mongo_db
        ports:
            - "8082:8082"
        environment:
            MONGODB_HOST: orders_mongo_db
            MONGODB_PORT: 27017
            MONGODB_DB: orders_service
            MQ_HOST: rabbitMQ
            HOST: 0.0.0.0
            PORT: 8082
        entrypoint: ["/bin/bash", "-c"]
        command: ["python main.py"]
        restart: always
        depends_on:
            - orders_mongo_db
            - rabbitMQ

    user-api:
        build:
            context: .
            dockerfile: ./PAD/Dockerfile
        container_name: user_service
        depends_on:
            - rabbitMQ
            - postgres_db
        networks:
            - default
        ports:
            - "0.0.0.0:8081:8081"
        volumes:
            - .:/user_service
        environment:
        #DB Config
            DB_HOST: postgres_db
            DB_PORT: 5432
            DB_USERNAME: postgres
            DB_PASSWORD: postgres
            DB_SCHEMA: postgres
        #api properties
            API_PORT: 8081
            API_HOST: 0.0.0.0
            API_BASE_PATH: "/api/"
            DEFAULT_RATE_LIMIT: "5 per minute"
            DEFAULT_CAPACITY: 10
            GATEWAY_URL: "https://httpbin.org/post"
        #rabbitmq properties
            RABBITMQ_HOST: rabbitMQ
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: guest
            RABBITMQ_PASSWORD: guest
            ORDER_Q_NAME: ORDER_DELIVERY_EVENT
            PRODUCT_Q_NAME: PRODUCTS_CHECKING_EVENT
            PRODUCT_COMPENSATION_Q_NAME: COMPENSATION_PRODUCTS_CHECKING_EVENT
            ORDER_COMPENSATION_Q_NAME: COMPENSATION_ORDER_CHECKING_EVENT


volumes:
    rabbitMQ_volume:
    pgdata:
    orders_mongo_db_v:
    products_mongo_db_v:

